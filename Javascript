
Data Type:
--------------

    Primitive Datatype
    ------------------
    string
    number
    boolean
    null
    undefind

    Reference Datatype
    ------------------
    object
    function
    Date


Type Conversion and Coercion
-----------------------------
    String()
    Number()
    parseInt()
    parseFloat()
    .tofixed()
    .tofixed(2)
    .toString()


String function
----------------
    .concat()
    .toLowerCase()
    .toUpperCase()
    .indexOf()
    .lastIndexOf()
    .charAt()
    .endsWith()
    .includes()
    .subString()
    .slice()
    .split()
    .replace()


Array
-----
    let array = ['orange', 'mango'];
    let array = new Array('orange', 'mango');
    
    // check is array or not
    Array.isArray(array); // true or false

    .indexOf(value)
    
    mutating or modifing array
    .push()
    .unshift()
    .pop()
    .shift()
    .slice()
    .splice()
    .reverse()
    .concat()
    .includes()

    create new from current array (that means these following function not modifing but create new from current)
    .map()
    .filter()
    .find()
    .some()
    .every()
    .reduce()
    .sort()


Manipulating
------------
    window

    alert()
    prompt()
    confirm()

    window.document  or  document
    innerHeight;
    innerWidth;
    scrollX;
    scrollY;

    location
    location.reload()
    location.href;
    location.href = 'redirect-url';

    location.toString()  // current location(href)

    history
    history.go(-1)  // back
    history.go(1)


DOM
----

    document
    document.all;
    document.body;
    document.forms;
    document.forms[0];
    document.links;
    document.links[0];

    // foreach for html collection
    Array.from($htmlCollection).forEach(function(element){})


Html element selector
---------------------

    Single element selector
        let ele = document.getElementById();
        ele.className;
        ele.classList;
        ele.childNodes;
        ele.children;
        ele.parentNode;

        document.querySelector('#')
        document.querySelector('.')
        document.querySelector('tag')

    Multi element selector
        document.querySelectorAll()
        document.getElementsById()
        document.getElementsByClassName()
        document.getElementskByTagName()


Child, Parent & Traversing the DOM
----------------------------------

    let data = document.querySelector('#ads');
    data.childNodes[1].nodeName;
    data.childNodes[1].nodeType;

    nodeType
    1 = element
    2 = Attribute
    3 = Text Node
    8 = Comment
    9 = Document
    10 = Doctype

    data.childNodes;
    data.children;

    data.parentElement
    data.firstChild;
    data.firstElementChild;
    data.lastChild;
    data.lastElementChild;
    data.childElementCount;
    data.nextSibling;
    data.nextElementSibling
    data.previousSibling
    data.previousElementSibling


Creating, Removing & Replacing element
---------------------------------------

    let ele = document.createElement('li')
    ele.className=""
    ele.id=""
    ele.setAttribute('title', 'demo')

    ele.setAttribute();
    ele.getAttribute();
    ele.hasAttribute();
    ele.removeAttribute();

    ele.innerText = 'asdfsd'
    or
    let text = document.createTextNode('this is the text');
    ele.appendChild(text);

    ele1.replaceWith(ele2)
    myul.replaceChild(newli, li)
    myul.removeChild(li)


Event & Event object
--------------------

    document.getElementById('id').addEventListner('click', function(e){
        e.target;
        e.target.className;
        e.target.classList;
        e.target.id;
        e.offsetX;
        e.offsetY;
        e.clientX;
        e.clientY;
        e.preventDefault();
    })


Local storage & Session storage
-------------------------------

    localStorage.setItem()
    localStorage.getItem()
    localStorage.removeItem()
    localStorage.clear()

    sessionStorage.setItem()
    sessionStorage.getItem()
    sessionStorage.removeItem()
    sessionStorage.clear()


Math Object
-----------

    Math
    Math.PI
    Math.E
    Math.round()
        - Math.round(5.3) // 5
        - Math.round(5.9) // 6
    Math.ceil()
        - Math.ceil(5.3) // 6
        - Math.ceil(5.9) // 6
    Math.floor()
        - Math.floor(5.3) // 5
        - Math.floor(5.8) // 5
    Math.abs()
        - Math.abs(-5.2) // 5.2
        - Math.abs(5.2) // 5.2
    Math.sqrt(64) // 8
    Math.pow(2, 3) // 8
    Math.min(2, 3, 4, 5) // 2
    Math.max(2, 3, 4, 5) // 5
    Math.random() // 0 to 1
        - if( 0 to 100)
            - Math.random() * 100
        - if( 10 to 100)
            - (10) + (Math.random() * (100 - 10))
        - if( 50 to 100)
            - (50) + (Math.random() * (100 - 50))


Date Object
-----------

    new Date()
    new Date('8-4-2021 10:00:00')
    new Date('June 13 2000')
    new Date('08/16/2000') // mm/dd/yyyy

    let a = new Date()
    a.getDay()
    a.getDate()
    a.getMonth()
    a.getFullYear()
    a.getHours()
    a.getMinutes()
    a.getSeconds()
    a.getMilliseconds()

    a.setDate(23)
    a.setMonth(0)
    a.setFullYear(2000)
    a.setHours(1)
    a.setMinutes(2)
    a.setSeconds(3)


Object Literals, Constructors & object oriented
-----------------------------------------------

    function Car() {
        this.name = "MG",
        this.topSpeed = 250,
        this.run = function() {
            return "Car is running.."
        }    
    }
    let car = new Car()
    car.name
    car.topSpeed
    car.run()


Object Prototype
----------------

    car.Prototype.getName = function() {
        return this.name;
    }
    car.Prototype.setName = function(newName) {
        return this.name = newName;
    }

    car.getName()
    car.setName("TATA")


Prototype Inheritance
---------------------

    // sintax
    let food = Object.create(Prototype, object Literals)

    // Ex.:
        let food = Object.create({}, {
            name: "Mango",
            color: "Yellow"
        });

        // or (with prototype)
        function FoodProto() {
            getName = function() {
                return this.name
            }
            setName = function(newName) {
                return this.name = newName
            }
        }
        let food = Object.create(FoodProto, {
            name: "Mango",
            color: "Yellow"
        })


Prototype Inheritance with class (ES6)
--------------------------------------

    class Employee {
        constructor(name, email, salary) {
            this.name = name;
            this.email = email;
            this.salary = salary;
        }
        
        getName() {
            return this.name;
        }

        setName(newName) {
            this.name = newName;
        }
    }

    class Programmer extends Employee {
        constructor(name, email, salary, language) {
            super(name, email, salary);
            this.language = language;
        }
    }

    let employee = new Programmer('kaushik', 'km@yopmail.com', '1', 'js');
    console.log(employee);

Prototype Inheritance without class
--------------------------------------
    function Employee(name, email, salary) {
        this.name = name;
        this.email = email;
        this.salary = salary;
    }
    
    Employee.prototype.getName = () => {
        return this.name;
    }
    
    Employee.prototype.setName = (newName) => {
        this.name = newName;
        return this.name
    }
    
    
    function Programmer(name, email, salary, language) {
        Employee.call(this, name, email, salary);
        this.language = language;
    }
    
    Programmer.prototype = Object.create(Employee.prototype);
    Programmer.prototype.constructor = Programmer;
    
    let employee = new Programmer('kaushik', 'km@yopmail.com', '1', 'js');
    employee.setName('km');
    console.log(employee.name);


Ajax in javascript
------------------

    // ajax = ansyncronous javascript and xml
    // xhr = xmlHttpRequest

    // http status code
        // something like 404,500,200
    // readystate
        // 0 = unset = open() not called yet
        // 1 = opened = open()
        // 2 = headers_received = send()
        // 3 = loading = downloading, resposneText holds partials data
        // 4 = done = complete


    // Instantiate an xhr object
    const xhr = new XMLHttpRequest();

    // Open the object
    xhr.open('GET', 'json.json', true); // syntax: xhr.open('GET', 'data file (txt, json, html, etc)', true (ansyncronous))
    or
    xhr.open('GET', 'https://reqres.in/api/users?page=1', true);


    // What to do on progress (optional)
    xhr.onprogress = function() {
        console.log('onprogress');
    }

    // old function instead of xhr.onload
    xhr.onreadystatechange = function() {
        console.log('ready state is :', xhr.readyState);
        // 0 = unset = open() not called yet
        // 1 = opened = open()
        // 2 = headers_received = send()
        // 3 = loading = downloading, resposneText holds partials data
        // 4 = done = complete
    }

    // What to do when response is ready
    xhr.onload = function() {
        console.log('onload');
        console.log(this.status); // for get status code
        console.log(this.responseText); // for get response
    }

    // send the request
    xhr.send();


    // for post request
    xhr.open('POST', 'https://reqres.in/api/users', true);
    xhr.getResponseHeader('content-type', 'application/json');

    let param = `{
        "name": "morpheus",
        "job": "leader"
    }`;
    xhr.send(param);


Callback function
-----------------
    let users = [];

    function createUser(name, callback) {
        setTimeOut(function() {
            users.push(name);
            callback();
        }, 5000);
    }

    function userList() {
        setTimeOut(function() {
            users.foreach(function(user) {
                console.log(user);
            })
        }, 1000);
    }

    createUser('kaushik', userList);
    // when create user done then after call funcation callback (userList)


Promise Basics | Promise.then() & Promise.catch()
-------------------------------------------------

    function createUser() {
        return new Promise(function(resolve, reject)) {
            setTimeOut(() => {
                let error = false;
                if(error) 
                    resolve()
                else
                    reject('error')
            }, 5000)
        }
    }

    createUser().then(function(){
        console.log('created')
        userList();
    }).catch(function(error){
        console.log(error)
    })

    or

    createUser().then(userList).catch(function(error){
        console.log(error)
    })

    function userList() {}

    web dev simplied
    ----------------
    Promise.all() // must be all are resolve other wise it goes in cache
    Promise.any() // any of first resolve return
    Promise.race() // any of first (no matter with resolve or reject)
    Promise.allsettled() // all run (no matter with resolve or reject) - always return in then (because it reutrn in single array that all are resolve or reject)

    we can use .finally() function after .catch() - which is all time run after then or catch

    we can use also this way
    const promise = Promise.resolve("Hi");
    promise.then(msg => msg).catch(msg => msg);


Arrow function
--------------

    function user() {}
    or
    let user = function() {}
    or 
    let user = () => {} // arrow function

    let user = () => {
        return "Kaushik";
    }
    let user = () => "Kaushik"; // return kaushik if single line code then no need to curly bracks

    let name = 'kaushik'
    let user = name => "hello "+name; // if param 1 then no need to round bracks
    let user = (name, email) => "hello "+name+email;


Fetch api
----------

    // for get request
    fetch('https://reqres.in/api/users?page=1').then(response=>response.json()).then(data=>console.log(data));

    // for post request
    param = {
        method: "POST",
        headers: {
            'Content-type': 'application/json',
        },
        data: JSON.stringify({
            title: 'foo',
            body: 'bar',
            userId: 1,
        })
    }
    fetch('https://jsonplaceholder.typicode.com/posts', param).then(response=>response.json()).then(data=>console.log(data));

    // data must be pass in string in post request
    // must be use two time then
    // first then - return repsonse with json // response.json() so that we have not need to parse in second then

    
Async/Await function
--------------------

    // async function always return promise 

    async function userList() {
        const response = await fetch('https://reqres.in/api/users?page=1');
        let users = await response.json();
        return users;
    }
    
    userList().then(data=>console.log(data));


Error Handling & Try Catch in Javascript
-----------------------------------------

    throw new Error("Here is the error.");

    or

    try {

    } catch (error) {
        console.log(error.name);
        console.log(error.message);
    }


Regular Expressions & related functions
---------------------------------------

let reg = /kaushik/;
let reg = /kaushik/g; // g means global
let reg = /kaushik/i; // i means case insensitive

console.log(reg); // return /kaushik/
console.log(reg.source); // return kaushik

// functions
exec() // return array or null
test() // return true or false
match() // return array or null
search() // return index of first match or -1
replace() // return new replaced string

let reg = /kaushik/
let data = "Hi kaushik1, this is the test kaushik's data"

exec()
    - return array or null
    - we can use multiple exec() function with global flag
    - Ex.:
        console.log(reg.exec(data));

        // if I need to get second position name of kaushik
            let reg = /kaushik/g   //we need to add g flag means global
            console.log(reg.exec(data)) // first kaushik word
            console.log(reg.exec(data)) // second kaushik word

        // if we want to ignore case insensitive then   
            let reg = /kaushik/i

test()
    - return true or false
    - Ex.:
        console.log(reg.test(data)) // return true or false

match()
    - return array or null
    - Ex.:
        console.log(reg.match(data)) // This is the wrong
        console.log(data.match(reg)) // This is the right

seach()
    - return index of first match or -1
    - Ex.:
        console.log(data.seach(reg))

replace()
    - return new replaced string
    - Ex.:
        console.log(data.replace(reg, "shubham"))

        - if we need to all kaushik word replace then add g flag in regular Expressions
            let data = /kaushik/g
            console.log(data.replace(reg, "shubham"))


Regular Expressions - Metacharacters
------------------------------------
let regex = /kaushik/
regex = /^kaushik/   // ^ means string start with kaushik
regex = /kaushik$/   // $ means string end with kaushik
regex = /k.ushik/   // . means we can add any one char instead of .
regex = /k*ushik/   // * means we can add 0 or more characters instaed of *
regex = /ka?ushi?k/   // ? means char option ahead of ? (I can not put any char)
regex = /k\*ushik/   // \ means ingore after sign (*) and match as a k*ushik string


Regular Expressions - character sets - we use []
------------------------------------
let regex = /kaushik/   ny character from a to z
regex = /k[aty]ushik/   // can be an a, t or y
regex = /k[^aty]ushik/   // can not be an a, t or y
regex = /k[^aty]ush[ui]k/   // can not be an a, t or y + can be an u or i
regex = /k[a-zA-Z]ush[ui0-9][0-9]k/   // we can use as many character set as we want


Regular Expressions - qualifiers - we use {}
------------------------------------
let regex = /kaushik/
regex = /kau{2}shik/   // u can occur exectly 2 times
regex = /kau{0, 2}shik/   // u can occur exectly 0 to 2 (0 or 1 or 2) times


Regular Expressions - Groupings - we use ()
------------------------------------
let regex = /kaushik/
regex = /(kau){2}([0-9]s){3}hik/   //kaukau1s1s2shik


Regular Expressions - Shorthand character classes
------------------------------------
let regex = /\waushik/  // \w means any word character ( _ or alphabet or number )
regex = /\w+aushik/     // \w+ means one or more word character
regex = /\Waushik/      // \W means non word character ( $$#@(etc) and also space( ))
regex = /\W+aushik/     // \W means one or more non word character ( $$#@(etc) and also space( ))
regex = /ku\d999/       // \d means any one digit
regex = /ku\d+999/      // \d+ means one or more digit
regex = /\D999/         // \D means non digit
regex = /\D+999/        // \D+ means one or more non digit
regex = /\s999/         // \s means match whitespace character
regex = /\s+999/        // \s+ means match one or more whitespace character
regex = /\S999/         // \S means match non whitespace character
regex = /\S+999/        // \S+ means match one or non whitespace character
regex = /kaushik\b/     // \b means boundary (end with it)


Regular Expressions - Assertions
--------------------------------
regex = /kaus(?=h)ik/     // (?=h) means match kaushik
regex = /kaus(?!h)ik/     // (?!h) means match kaus (!h) ik


Iterators
-----------
function usersList(users) {
    let userIndex = 0;
    return {
        next: function () {
            if (userIndex < users.length) {
                return {
                    value: users[userIndex++],
                    done: false
                }
            } else {
                return {
                    done: true
                }
            }
        }
    }
}

let users = usersList(['kaushik', 'rutvik']);

console.log(users.next()) // {value: "kaushik", done: false}
console.log(users.next()) // {value: "rutvik", done: false}
console.log(users.next()) // {done: true}


Generators
-----------
- must be required * after function keyword
- it is return yield vlaue

function* numberGen() {
    let i = 0;

    // yield 0;
    // yield 1;
    // yield 2;
    // yield 3;
    // yield 4;

    while(true) {
        yield i++;
    }
}

const gen = numberGen();
console.log(gen.next()); // {value: 0, done: false}
console.log(gen.next()); // {value: 1, done: false}
console.log(gen.next()); // {value: 2, done: false}
console.log(gen.next()); // {value: 3, done: false}

console.log(gen.return()); // exit - {value: undefind, done: true}
// if we want to set value with return then
console.log(gen.return(10)); // exit - {value: 10, done: true}
 
//if I use next function after use get.return() then
    console.log(gen.next()); // {value: 0, done: false}
    console.log(gen.next()); // {value: 1, done: false}
    console.log(gen.next()); // {value: 2, done: false}
    console.log(gen.next()); // {value: 3, done: false}
    console.log(gen.return()); // {value: undefind, done: true}
    console.log(gen.next()); // {value: undefind, done: true}


For-in and For-of loop
-----------------------
let users = ['kaushik', 'rutik'];

for (const key in users) {
    console.log(key); // 0 1 2
}

for (const user of users) {
    console.log(user); // kaushik rutik
}


Map in javascript
-----------------
let myMap = new Map();

const key1 = "kaushik", key2 = {}, key3 = function() {};

// setting map values
myMap.set(key1, "This is my name.");
myMap.set(key2, "This is blank object.");
myMap.set(key3, "This is the function.");

//or - we can also set in this way
let myMap = new Map([
    [key1, "This is my name."],
    [key2, "This is blank object."],
    [key3, "This is the function."],
])

// getting the values from the map
console.log(myMap.get(key1));
console.log(myMap.get(key2));
console.log(myMap.get(key3));

// check value is already exist or not
console.log(myMap.has(key1))

// delete map value (delete single value)
myMap.delete(key1)

// clear map value (clear all the value from map)
myMap.clear()

// get size of map
console.log(myMap.size);

// print map value
for (const [key, value] of myMap) {
    console.log(key, value);
}

// print only keys of map
for (const key of myMap.keys()) {
    console.log(key);
}

// print only values of map
for (const value of myMap.values()) {
    console.log(value);
}

// print map value using foreach
myMap.forEach((value, key) => {  // make sure add first param value and second key (value, index, array for foreach concept)
    console.log(key, value);
});

// print map to array
console.log(Array.from(myMap));
console.log(Array.from(myMap.keys()));
console.log(Array.from(myMap.values()));


Set in javascript
-----------------
let mySet = new Set();

// set always stores unique values
mySet.add("kaushik");
mySet.add("rutik");

// print length
console.log(mySet.size);

// check value is exist or not
console.log(mySet.has("rutik")); // return true of false

// delete value from set
mySet.delete("rutik");

// clear all the values from set
mySet.clear();

// print set using for-of loop
for (const value of mySet) {
    console.log(value);
}

// print set using foreach loop
mySet.forEach(value => {
    console.log(value);
});

// convert set to array
console.log(Array.from(mySet));


Symbol in javascript
--------------------

let key1 = Symbol('key');   // we can any text pass instead of key (for indentify)
let key2 = Symbol('key');   // we can any text pass instead of key (for indentify)

// always not match symbol, it is return false
console.log(key1 === key2);

let obj = {};
obj[key1] = "kaushik";
obj[key2] = "rutik";
obj.key3 = "test";

console.log(obj); // print full object with symbol
console.log(Object.getOwnPropertySymbols(obj)) // print obj's symbol list
console.log(obj[key1]); // kaushik
console.log(obj[key2]); // rutik

// we can not print symbol using for, only will be print key3
for (const key in obj) {
    console.log(key);
}

// we can not print symbol using stringify, only will be print key3
console.log(JSON.stringify(obj)); 

// only way to print symbols
console.log(Object.getOwnPropertySymbols(obj))


Destructuring in javascript
---------------------------
let a, b;
[a, b] = [1, 2];
console.log(a, b); // 1 2

[a, b, c, ...d] = [1, 2, 3, 4, 5, 6, 7];
console.log(a, b, c, d); // 1 2 3 [4, 5, 6, 7]

({a, b, c, ...d} = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7})
console.log(a, b, c, d); // 1 2 3 {d: 4, e: 5, f: 6, g: 7}


// object destructuring
let user = {
    name: "kaushik",
    age: 90,
    gender: "male"
}

let {name, age, gender} = user;
console.log(name, age, gender);  // kaushik  90 male

